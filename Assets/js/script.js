var generateBtn = document.querySelector("#generate");

// WRITE A PASSWORD TO THE PASSWORD INPUT

function writePassword() {
  //TARGET THE ID ATTRIBUTE OF PASSWORD FROM THE HTML FILE
  var passwordText = document.querySelector("#password");

  //USE A WINDOW PROMPT METHOD TO ASK THE USER TO CREATE A PASSWORD THAT IS NO SHORTER THAN 8 CHARACTERS AND NO LONGER THAN 128 CHARACTERS
  var passwordLength = prompt(
    "Create a password! Pick a number between 8 and 128."
  );
  //EVAULATE THE PASSWORD LENGTH TO A BE TRUTHY AND A NUMBER VALUE AS OPPOSED TO A STRING VALUE FROM THE USERS INPUT

  if (passwordLength === null) {
    //THIS FUNCTION MAKES SURE THE PASSWORD LENGTH HAS SOME VALUE IN ORDER TO RUN THE REST OF THE PROGRAM -- IF THE PASSWORD LENGTH IS STRICTLY NULL IT MEANS THERES NOTHING FOR THE CODE TO GENERATE AND NO PASSWORD WILL COME OF IT

    //BASICALLY THE FUNCTION IS ASKING FOR THE PASSWORD LENGTH TO BE TRUTHY AND IT WILL RETURN THIS FUNCTION CONDITIONAL STATEMENTT
    return;
  }
  //TURNS THE USER INPUT STRING VALUE INTO AN INTEGER. AT ITS BASE LEVEL PARSEINT LOOKS TO RETURN THE FIRST INTEGER FROM A STRING. HERE WE ARE HOPING THAT HAPPENS EARLY AND WITH OUR REQUIREMENTS OF THE PASSWORD LENGTH AND SPECIAL STATEMENTS LATER ON IN THE PROGRAM
  passwordLength = parseInt(passwordLength);

  //I AM ASKING THE PROGRAM IF THE PASSWORD LENGTH HAS VALUE OR THE PASSWORD LENGHT IS GREATER THAN 8 OR THE PASSWORD LENGTH IS LESS THAN 128

  //AS LONG AS THE REQUIRED EXPRESSION TO THE LEFT OF THE --||-- OR OPERAND IS TRUTHY THE STATEMENT CONTINUES TO READ UNTIL ALL PARAMETERS OF THE EXPRESSION RETURN TRUTHY VALS
  if (isNaN(passwordLength) || passwordLength < 8 || passwordLength > 128) {
    //IF ONE OF THE EXPRESSION PARAMS RETURNS A FALSY VALUE THE PROGRAM WILL THROW THE USER AN ALERT WINDOW METHOD
    alert(
      "Password requirements not met. Please refer to original password generation parameters to continue."
    );

    //IF ALL ARE TRUTHY JUST RETURN THE TRUTHINESS OF THE FUNCTION
    return;
  }
  //NEXT WE DECLARE OUR VARIABLES THAT PROMPT OUR USER WITH A CONTINUE WINDOW METHOD WHICH ALLOWS FOR AN ALWAYS TRUTHY VALUE TO BE RETURNED. IF THE USER DOESN'T CONTINUE WITH THE WINDOW METHOD THE VALUE RETURNS FALSY AND THE CODE WOULDN'T RUN TO BEGIN WITH. THIS REQUIRES USER INPUT.

  var lowercase = confirm("Pick some lowercase letters!");
  var uppercase = confirm("Pick some uppercase letters!");
  var numVal = confirm("Pick some numbers!");
  var specialChar = confirm("Pick some special characters!");

  //IT IS A REQUIREMENT FOR AT LEAST ONE OF THOSE VALUES FROM EACH WINDOW METHOD PROMPT OF CONFIRM TO BE USED. SO WE MUST USE AN IF STATEMENT TO CHECK FOR TRUTHINESS

  if (!lowercase && !uppercase && !numVal && !specialChar) {
    //THE ABOVE STATEMENT IS LOOKING FOR COMPLETELY FALSY RETURNS OF THEIR EXPRESSIONS. IF THEIR IS A TRUTHY RETURN THEN THE PROGRAM AND THE PASSWORD GENERATOR CANNOT WORK. EXAMPLE -- IF NOT A LOWERCASE === FALSY WE ARE GOOD, MOVE ON >> IF NOT AN UPPERCASE === TRUTHY <> BREAK OUT AND START OVER. PROMPT THE USER WITH AN ALERT WINDOW METHOD THAT WE NEED MORE INFORMATION.
    alert(
      "Make sure to select a lower and upper case letter, a number, and a special value"
    );
    return; //RETURN THE TRUTHINESS
  }
  //NEXT WE CREATE AN EMPTY STRING FOR OUR PASSWORD TO BE APPENDED INTO AND A BUNCH OF IF STATEMENTS THAT MAKE SURE OUR REQUIRED FIELDS POPULATE OUR NEW EMPTY AND SOON TO BE FILLED PASSWORD STRING

  var passwordChar = "";

  if (lowercase) {
    passwordChar += "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z";
  }

  if (uppercase) {
    passwordChar += "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z";
  }

  if (numVal) {
    passwordChar += "1,2,3,4,5,6,7,8,9";
  }

  if (specialChar) {
    passwordChar += "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
  }

  var password = "";

  for (i = 0; i < passwordLength; i++) {
    //I AM ASKING THE LOOP TO RETURN RANDOM VALUES FROM THE PASSWORD CHARACTERS LIST IN ORDER TO GIVE US A NEWLY MINTED PASSWORD BY ADDING THESE NEW PASSWORD CHARACTERS TO OUR EMPTY PASSWORD STRING
    var passVal = Math.floor(Math.random() * passwordChar.length);

    password += passwordChar[passVal]; //passVal IS OUR INDEX OF RANDOMIZED VALUES FROM OUR ABOVE MATH FLOOR AND MATH RANDOM COMBO METHODS
  }

  //THE FINAL STEP IS DISPLAYING OUR NEW PASSWORD TO OUR USER -- FINGERS CROSSED

  passwordText.value = password;
}

//NOW I AM CREATING AN EMPTY VARIABLE STRING WITH THE ASSIGNED VARIABLE NAME OF PASSWORD. WE ARE GETTING SOMEWHERE AT THIS POINT. I WILL LOOP THROUGH OUR NEWLY CREATED PASSWORDCHAR STRING AND RETURN A COMPLETELY RANDOMIZED PASSWORD  OF NUMBERS/ LETTERS / SPECIALCHAR

//NONE OF THIS WORKS WITHOUT LISTENING FOR THE USERS CLICK OF THE GENERATOR BUTTON AND MAKING SURE THE WRITE PASSWORD FUNCTION RUNS!!

generateBtn.addEventListener("click", writePassword);

//LET'S SEE
